"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createOrJoinSocket = void 0;
var globals_1 = require("./globals");
var constants_1 = require("./constants");
var attach_listener_1 = require("./attach-listener");
var attach_shared_listeners_1 = require("./attach-shared-listeners");
var manage_subscribers_1 = require("./manage-subscribers");
//TODO ensure that all onClose callbacks are called
var cleanSubscribers = function (url, subscriber, optionsRef, setReadyState) {
    return function () {
        manage_subscribers_1.removeSubscriber(url, subscriber);
        if (!manage_subscribers_1.hasSubscribers(url)) {
            try {
                globals_1.sharedWebSockets[url].onclose = function (event) {
                    if (optionsRef.current.onClose) {
                        optionsRef.current.onClose(event);
                    }
                    setReadyState(constants_1.ReadyState.CLOSED);
                };
                globals_1.sharedWebSockets[url].close();
            }
            catch (e) {
            }
            delete globals_1.sharedWebSockets[url];
        }
    };
};
exports.createOrJoinSocket = function (webSocketRef, url, setReadyState, optionsRef, setLastMessage, startRef, reconnectCount) {
    if (optionsRef.current.share) {
        if (globals_1.sharedWebSockets[url] === undefined) {
            setReadyState(constants_1.ReadyState.CONNECTING);
            globals_1.sharedWebSockets[url] = new WebSocket(url, optionsRef.current.protocols);
            attach_shared_listeners_1.attachSharedListeners(globals_1.sharedWebSockets[url], url);
        }
        else {
            setReadyState(globals_1.sharedWebSockets[url].readyState);
        }
        var subscriber = {
            setLastMessage: setLastMessage,
            setReadyState: setReadyState,
            optionsRef: optionsRef,
            reconnectCount: reconnectCount,
            reconnect: startRef,
        };
        manage_subscribers_1.addSubscriber(url, subscriber);
        webSocketRef.current = globals_1.sharedWebSockets[url];
        return cleanSubscribers(url, subscriber, optionsRef, setReadyState);
    }
    else {
        setReadyState(constants_1.ReadyState.CONNECTING);
        webSocketRef.current = new WebSocket(url, optionsRef.current.protocols);
        return attach_listener_1.attachListeners(webSocketRef.current, {
            setLastMessage: setLastMessage,
            setReadyState: setReadyState
        }, optionsRef, startRef.current, reconnectCount);
    }
};
//# sourceMappingURL=create-or-join.js.map